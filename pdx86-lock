#!/bin/sh

# Clone the repository into a temporary directory
# Checkout the mutex branch
# Read and update the LOCK file if possible with PDX86_ID
# Store a lock lease time in hours in the commit message
# Remove the temporary repository
# Report on the result

PDX86_REPO=ssh://$PDX86_ID@git.infradead.org/srv/git/pdx86-tools.git
LOCKFILE="LOCK"
LEASE_HOURS=2
FORCE=false
CMD="lock"
ERR=1

clean_up() {
	rm -rf $PDX86_DIR
}

clean_up_trap() {
	clean_up
	exit $ERR
}
trap clean_up HUP INT TERM

while true; do
	case "$1" in
	"-f")
		FORCE=true
		;;
	"-h")
		CMD="help"
		;;
	"-s")
		CMD="status"
		;;
	"-t")
		shift
		LEASE_HOURS="$1"
		;;
	"-u")
		CMD="unlock"
		;;
	*)
		break
		;;
	esac
	shift
done


if [ -z "$PDX86_ID" ]; then
	echo "ERROR: PDX86_ID environment variable is not set"
	exit $ERR
fi

PDX86_DIR=`mktemp -d --suffix=.pdx86-lock`

if [ ! -d "$PDX86_DIR" ]; then
	echo "ERROR: failed to create temp directory"
	exit $ERR
fi

clone() {
	git clone -b mutex $PDX86_REPO $PDX86_DIR 2> /dev/null
	if [ $? -ne 0 ]; then
		echo "ERROR: failed to clone pdx86 repository ($PDX86_REPO)"
		clean_up
		exit $ERR
	fi
}

usage() {
	echo "Usage: $(basename $0) [OPTIONS]"
	echo ""
	echo "With no arguments, attempt to acquire the lock with a default 2 hour lease"
	echo ""
	echo "  -f     force the lock or unlock operation"
	echo "         (has no effect if you own the lock)"
	echo "  -h     display this help and exit"
	echo "  -s     show status of the lock, but do not acquire or free it"
	echo "  -t NUM specify a lease time of NUM hours, defaults to 2 hours"
	echo "  -u     release the lock"
}

push() {
		git commit -a -m "$1" > /dev/null 2>&1 && git push 2> /dev/null
		if [ $? -ne 0 ]; then
			echo "ERROR: failed to push LOCK change"
			clean_up
			exit $ERR
		fi
}

owner() {
	if [ -z "$VAL" ]; then
		echo "Lock is free"
		return
	fi

	echo "Lock held by $VAL:"
	git log --pretty=format:"%h %s%n%cr" -1 -- LOCK
	LOCK_TIME=$(date -d "$(git log --pretty=format:%cI origin/mutex -1 -- LOCK)" +%s)
	CUR_TIME=$(date +%s)
	ELAPSED_TIME=$(($CUR_TIME-$LOCK_TIME))
	LAST_LEASE=$((3600*$(git log --pretty=format:%s -1 -- LOCK | sed -e "s/.*For \([0-9][0-9]*\) hours.*/\1/")))
	if [ $? -ne 0 ]; then
		echo "No lease time provided"
	elif [ $ELAPSED_TIME -lt $LAST_LEASE ]; then
		echo "Time remaining on lease: $(($(($LAST_LEASE-$ELAPSED_TIME))/60)) minutes"
	else
		echo "Lease expired: $(($(($ELAPSED_TIME-$LAST_LEASE))/60)) minutes ago"
	fi
}

lock() {
	if [ -z "$VAL" ]; then
		echo "$PDX86_ID" > $LOCKFILE
		push "Lock acquired by $PDX86_ID (For $LEASE_HOURS hours)"
		echo "Lock acquired by $PDX86_ID (For $LEASE_HOURS hours)"
	elif ($FORCE && [ ! "$VAL" = "$PDX86_ID" ]); then
		echo "$PDX86_ID" > $LOCKFILE
		push "Lock forcibly acquired by $PDX86_ID (For $LEASE_HOURS hours)"
		echo "Lock forcibly acquired by $PDX86_ID (For $LEASE_HOURS hours)"
	else
		owner
	fi
}

unlock() {
	if [ -z "$VAL" ]; then
		echo "Lock already free"
	elif [ "$VAL" = "$PDX86_ID" ]; then
		echo "" > $LOCKFILE
		push "Lock released by $PDX86_ID"
		echo "Lock released"
	elif $FORCE; then
		echo "" > $LOCKFILE
		push "Lock forcibly released by $PDX86_ID"
		echo "Lock forcibly released"
	else
		owner
		clean_up
		exit $ERR
	fi
}


cd $PDX86_DIR
VAL=`cat $LOCKFILE`

case "$CMD" in
"help")
	usage
	;;
"lock")
	clone
	lock
	;;
"status")
	clone
	owner
	;;
"unlock")
	clone
	unlock
	;;
*)
	echo "Unknown CMD: $CMD"
	usage
	clean_up
	exit $ERR
	;;
esac

clean_up
exit 0
